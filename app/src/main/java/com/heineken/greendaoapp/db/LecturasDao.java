package com.heineken.greendaoapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LECTURAS".
*/
public class LecturasDao extends AbstractDao<Lecturas, Long> {

    public static final String TABLENAME = "LECTURAS";

    /**
     * Properties of entity Lecturas.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_lectura = new Property(1, String.class, "id_lectura", false, "ID_LECTURA");
        public final static Property Sku = new Property(2, String.class, "sku", false, "SKU");
        public final static Property Cb = new Property(3, String.class, "cb", false, "CB");
        public final static Property Descripcion = new Property(4, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Id_um = new Property(5, String.class, "id_um", false, "ID_UM");
        public final static Property Um = new Property(6, String.class, "um", false, "UM");
        public final static Property Cantidad = new Property(7, String.class, "cantidad", false, "CANTIDAD");
    }


    public LecturasDao(DaoConfig config) {
        super(config);
    }
    
    public LecturasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LECTURAS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_LECTURA\" TEXT NOT NULL ," + // 1: id_lectura
                "\"SKU\" TEXT," + // 2: sku
                "\"CB\" TEXT," + // 3: cb
                "\"DESCRIPCION\" TEXT," + // 4: descripcion
                "\"ID_UM\" TEXT," + // 5: id_um
                "\"UM\" TEXT," + // 6: um
                "\"CANTIDAD\" TEXT);"); // 7: cantidad
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LECTURAS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Lecturas entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getId_lectura());
 
        String sku = entity.getSku();
        if (sku != null) {
            stmt.bindString(3, sku);
        }
 
        String cb = entity.getCb();
        if (cb != null) {
            stmt.bindString(4, cb);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(5, descripcion);
        }
 
        String id_um = entity.getId_um();
        if (id_um != null) {
            stmt.bindString(6, id_um);
        }
 
        String um = entity.getUm();
        if (um != null) {
            stmt.bindString(7, um);
        }
 
        String cantidad = entity.getCantidad();
        if (cantidad != null) {
            stmt.bindString(8, cantidad);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Lecturas entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getId_lectura());
 
        String sku = entity.getSku();
        if (sku != null) {
            stmt.bindString(3, sku);
        }
 
        String cb = entity.getCb();
        if (cb != null) {
            stmt.bindString(4, cb);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(5, descripcion);
        }
 
        String id_um = entity.getId_um();
        if (id_um != null) {
            stmt.bindString(6, id_um);
        }
 
        String um = entity.getUm();
        if (um != null) {
            stmt.bindString(7, um);
        }
 
        String cantidad = entity.getCantidad();
        if (cantidad != null) {
            stmt.bindString(8, cantidad);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Lecturas readEntity(Cursor cursor, int offset) {
        Lecturas entity = new Lecturas( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // id_lectura
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sku
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cb
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // descripcion
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // id_um
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // um
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // cantidad
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Lecturas entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_lectura(cursor.getString(offset + 1));
        entity.setSku(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCb(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescripcion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId_um(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUm(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCantidad(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Lecturas entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Lecturas entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Lecturas entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
