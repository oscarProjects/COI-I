package com.heineken.greendaoapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAMILIA".
*/
public class FamiliaDao extends AbstractDao<Familia, Long> {

    public static final String TABLENAME = "FAMILIA";

    /**
     * Properties of entity Familia.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Idcatalogo_familia = new Property(1, String.class, "idcatalogo_familia", false, "IDCATALOGO_FAMILIA");
        public final static Property Identificador = new Property(2, String.class, "identificador", false, "IDENTIFICADOR");
        public final static Property Descripcion = new Property(3, String.class, "descripcion", false, "DESCRIPCION");
    }


    public FamiliaDao(DaoConfig config) {
        super(config);
    }
    
    public FamiliaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAMILIA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IDCATALOGO_FAMILIA\" TEXT NOT NULL ," + // 1: idcatalogo_familia
                "\"IDENTIFICADOR\" TEXT," + // 2: identificador
                "\"DESCRIPCION\" TEXT);"); // 3: descripcion
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAMILIA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Familia entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getIdcatalogo_familia());
 
        String identificador = entity.getIdentificador();
        if (identificador != null) {
            stmt.bindString(3, identificador);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(4, descripcion);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Familia entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getIdcatalogo_familia());
 
        String identificador = entity.getIdentificador();
        if (identificador != null) {
            stmt.bindString(3, identificador);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(4, descripcion);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Familia readEntity(Cursor cursor, int offset) {
        Familia entity = new Familia( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // idcatalogo_familia
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // identificador
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // descripcion
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Familia entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdcatalogo_familia(cursor.getString(offset + 1));
        entity.setIdentificador(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescripcion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Familia entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Familia entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Familia entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
