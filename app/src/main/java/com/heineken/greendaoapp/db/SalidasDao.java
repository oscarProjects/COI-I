package com.heineken.greendaoapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SALIDAS".
*/
public class SalidasDao extends AbstractDao<Salidas, Long> {

    public static final String TABLENAME = "SALIDAS";

    /**
     * Properties of entity Salidas.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property _id_ = new Property(1, String.class, "_id_", false, "_ID_");
        public final static Property Sku = new Property(2, String.class, "sku", false, "SKU");
        public final static Property Idum = new Property(3, String.class, "idum", false, "IDUM");
        public final static Property Cantidad = new Property(4, String.class, "cantidad", false, "CANTIDAD");
        public final static Property Codigo = new Property(5, String.class, "codigo", false, "CODIGO");
    }


    public SalidasDao(DaoConfig config) {
        super(config);
    }
    
    public SalidasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SALIDAS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"_ID_\" TEXT NOT NULL ," + // 1: _id_
                "\"SKU\" TEXT," + // 2: sku
                "\"IDUM\" TEXT," + // 3: idum
                "\"CANTIDAD\" TEXT," + // 4: cantidad
                "\"CODIGO\" TEXT);"); // 5: codigo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SALIDAS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Salidas entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.get_id_());
 
        String sku = entity.getSku();
        if (sku != null) {
            stmt.bindString(3, sku);
        }
 
        String idum = entity.getIdum();
        if (idum != null) {
            stmt.bindString(4, idum);
        }
 
        String cantidad = entity.getCantidad();
        if (cantidad != null) {
            stmt.bindString(5, cantidad);
        }
 
        String codigo = entity.getCodigo();
        if (codigo != null) {
            stmt.bindString(6, codigo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Salidas entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.get_id_());
 
        String sku = entity.getSku();
        if (sku != null) {
            stmt.bindString(3, sku);
        }
 
        String idum = entity.getIdum();
        if (idum != null) {
            stmt.bindString(4, idum);
        }
 
        String cantidad = entity.getCantidad();
        if (cantidad != null) {
            stmt.bindString(5, cantidad);
        }
 
        String codigo = entity.getCodigo();
        if (codigo != null) {
            stmt.bindString(6, codigo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Salidas readEntity(Cursor cursor, int offset) {
        Salidas entity = new Salidas( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // _id_
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sku
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // idum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cantidad
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // codigo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Salidas entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.set_id_(cursor.getString(offset + 1));
        entity.setSku(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIdum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCantidad(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCodigo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Salidas entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Salidas entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Salidas entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
